import TelegramBot from "node-telegram-bot-api";

import { config } from "dotenv";
import { sql } from "@vercel/postgres";
import { VercelRequest, VercelResponse } from "@vercel/node";

function getMonday(d: Date) {
  d = new Date(d);
  var day = d.getDay(),
    diff = d.getDate() - day + (day == 0 ? -6 : 1); // adjust when day is sunday
  return new Date(d.setDate(diff));
}

config();

// replace the value below with the Telegram token you receive from @BotFather
const token = process.env.TELEGRAM_API_TOKEN;

const updateOrInsert = async (data: Record<string, string | number>) => {
  const { rowCount } =
    await sql`UPDATE results SET username = ${data.username}, steps = ${data.steps}, date = ${data.date} WHERE username = ${data.username} AND date = ${data.date}`;
  // update(
  //   "results",
  //   {
  //     username: data.username,
  //     steps: data.steps,
  //     date: data.date,
  //   },
  //   { username: data.username, date: data.date }
  // );

  if (rowCount) return;
  await sql`INSERT INTO results (username, steps, date) VALUES (${data.username}, ${data.steps}, ${data.date} )`;

  // sqlite.insert("results", {
  //   username: data.username,
  //   steps: data.steps,
  //   date: data.date,
  // });
};

const ALLOWED_USERS = (process.env.TG_USERNAMES_SECRET ?? "").split(",");

const regStemsSet = new Set();
const editStepsMap = new Map();
let flag = true;
export default async (request: VercelRequest, response: VercelResponse) => {
  // Create a bot that uses 'polling' to fetch new updates
  const bot = new TelegramBot(token!, { polling: true });

  if (flag) {
    await sql`CREATE TABLE IF NOT EXISTS results(
      id INTEGER PRIMARY KEY,
      username TEXT NOT NULL,
      steps INTEGER NOT NULL,
      date TEXT NOT NULL
      );`
      .catch(console.error)
      .then(() => {
        flag = false;
      });
  }

  bot.setMyCommands([
    { command: "/reg_steps", description: "–ó–∞–ø–∏—Å–∞—Ç—å —à–∞–≥–∏" },
    { command: "/edit_steps", description: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–≥–∏" },
    { command: "/top_all", description: "–¢–û–ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è" },
    { command: "/top_week", description: "–¢–û–ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é" },
    { command: "/cancel", description: "–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è" },
    { command: "/my_steps", description: "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö —à–∞–≥–æ–≤" },
  ]);
  try {
    // Retrieve the POST request body that gets sent from Telegram
    const { body } = request;

    // Ensure that this is a message being sent
    if (body?.message) {
      // Retrieve the ID for this chat
      // and the text that the user sent
      const {
        chat: { id: chatId },
        text,
        from: { username: msgUsername },
        date,
      } = body.message;

      // Create a message to send back
      // We can use Markdown inside this
      const message = `‚úÖ Thanks for your message: *"${text}"*\nHave a great day! üëãüèª`;

      // Send our new message back in Markdown and
      // wait for the request to finish
      // –ø—Ä–æ—Å—Ç–æ –≤–æ–ª—à–µ–±–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
      if (!ALLOWED_USERS.includes(msgUsername)) {
        return;
      }

      switch (text) {
        case "/start": {
          await bot.sendMessage(
            chatId,
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ø–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —à–∞–≥–æ–≤. –û–Ω —Å—á–∏—Ç–∞–µ—Ç –¥–∞—Ç—ã —Ç–æ–ª—å–∫–æ –≤ —Ç–∞–π–º–∑–æ–Ω–µ +3 (–ú–°–ö), —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
          );
          return;
        }
        case "/reg_steps": {
          regStemsSet.add(msgUsername);
          await bot.sendMessage(
            chatId,
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ —à–∞–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —á–∏—Å–ª–æ–º –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤. –ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —à–∞–≥–∏, –Ω–∞–ø–∏—à–∏—Ç–µ /cancel"
          );
          return;
        }
        case "/edit_steps": {
          editStepsMap.set(msgUsername, null);
          await bot.sendMessage(
            chatId,
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
          );
          return;
        }
        case "/top_all": {
          const { rows: data } =
            await sql`SELECT SUM (steps) as sum, username FROM results GROUP BY username ORDER BY sum DESC`;
          if (data.length) {
            await bot.sendMessage(
              chatId,
              `${data
                .map(
                  (item, ind) => `${ind + 1}. @${item.username} ${
                    item?.sum
                  } —à–∞–≥–æ–≤
`
                )
                .join("")}`
            );
          } else {
            bot.sendMessage(chatId, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö");
          }
          return;
        }
        case "/top_week": {
          const todayMSK = new Date(date * 1000 + 3 * 60 * 60 * 1000);
          const mondayOfWeek = getMonday(todayMSK).toISOString().split("T")[0];
          const { rows: data } =
            await sql`SELECT SUM(steps) AS sum,username FROM results WHERE id in(SELECT id FROM results WHERE date >= '${mondayOfWeek}') GROUP BY username ORDER by sum DESC`;
          if (data.length) {
            await bot.sendMessage(
              chatId,
              `${data
                .map(
                  (item, ind) => `${ind + 1}. @${item.username} ${
                    item?.sum
                  } —à–∞–≥–æ–≤
`
                )
                .join("")}`
            );
          } else {
            await bot.sendMessage(chatId, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö");
          }
          return;
        }
        case "/cancel": {
          regStemsSet.delete(msgUsername);
          editStepsMap.delete(msgUsername);
          await bot.sendMessage(chatId, "–û—Ç–º–µ–Ω–µ–Ω–æ");
          return;
        }
        case "/my_steps": {
          const { rows: data } =
            await sql`SELECT steps, username, date FROM results WHERE username = ${msgUsername} ORDER BY date`;

          if (data.length) {
            await bot.sendMessage(
              chatId,
              `${data
                .map(
                  (item) => `${item.date}. ${item?.steps} —à–∞–≥–æ–≤
`
                )
                .join("")}`
            );
          } else {
            await bot.sendMessage(chatId, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö");
          }
          return;
        }
        default: {
          if (regStemsSet.has(msgUsername) && Number(text)) {
            const steps = Number(text);
            if (steps < 0 || steps > 150000) {
              await bot.sendSticker(
                chatId,
                "https://stickerswiki.ams3.cdn.digitaloceanspaces.com/Myfavoritecats_by_fStikBot/70482.160.gif"
              );
              return;
            }
            await updateOrInsert({
              username: msgUsername,
              stexps: steps,
              date: new Date(date * 1000 + 3 * 60 * 60 * 1000)
                .toISOString()
                .split("T")[0],
            });
            bot.sendMessage(chatId, "–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã");
            regStemsSet.delete(msgUsername);

            return;
          } else if (regStemsSet.has(msgUsername)) {
            await bot.sendMessage(
              chatId,
              "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ. –û–∂–∏–¥–∞–ª–æ—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ —á–∏—Å–ª–æ–º –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."
            );

            return;
          }

          // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞—á–∏—Ç, –Ω–æ –µ—â–µ –Ω–µ –≤–≤–µ–ª –¥–∞—Ç—É
          if (editStepsMap.has(msgUsername) && !editStepsMap.get(msgUsername)) {
            const isValid = /\d\d\d\d\-\d\d\-\d\d/.test(text);
            if (isValid) {
              editStepsMap.set(msgUsername, text);
              await bot.sendMessage(
                chatId,
                "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ —à–∞–≥–æ–≤ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ–º"
              );
            } else {
              await bot.sendMessage(
                chatId,
                "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –û–∂–∏–¥–∞–ª–∞—Å—å –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î"
              );
            }
          } else if (editStepsMap.get(msgUsername)) {
            const steps = Number(text);
            if (steps < 0 || steps > 150000) {
              await bot.sendSticker(
                chatId,
                "https://stickerswiki.ams3.cdn.digitaloceanspaces.com/Myfavoritecats_by_fStikBot/70482.160.gif"
              );
              return;
            }

            updateOrInsert({
              username: msgUsername,
              steps: steps,
              date: editStepsMap.get(msgUsername),
            });
            await bot.sendMessage(chatId, "–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
            editStepsMap.delete(msgUsername);

            return;
          }
        }
      }
    } else {
      response.send("OK");
    }
  } catch (error) {
    // If there was an error sending our message then we
    // can log it into the Vercel console
    console.error("Error sending message");
    console.log((error as Error).toString());
    response.status(500).send({ error: (error as Error).toString() });
  }

  // Acknowledge the message with Telegram
  // by sending a 200 HTTP status code
  // The message here doesn't matter.
  response.send("OK");
};
